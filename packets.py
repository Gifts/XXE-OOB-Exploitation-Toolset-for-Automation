
#coding: utf8

try:
    import urllib2
except ImportError:
    import urllib.request as urllib2

__author__ = 'AlOsipov'


class Packet(object):
    DEFAULT_MIME = 'application/xml'
    DEFAULT_HEADERS = {'Access-Control-Allow-Origin': '*'}

    def __init__(self, content='', status=200, mimetype=None, headers=None, force_headers=True):

        self.content = content 
        self.status = status
        self.mimetype = mimetype
        self.headers = headers

        if self.mimetype is None:
            self.mimetype = Packet.DEFAULT_MIME


        if self.headers is None:
            self.headers = dict(Packet.DEFAULT_HEADERS)
        if isinstance(self.headers, dict) and force_headers:
            self.headers.update(Packet.DEFAULT_HEADERS)

        self._header_keys_list = None

    def _header_keys(self):

        if self._header_keys is not None:
            self._header_keys_list = set(
                map(lambda x: x.upper(), dict(self.headers).keys())
            )
        return self._header_keys_list


    def _create_headers(self):

        tmp_result = []
        if 'CONTENT-TYPE' not in self._header_keys():
            tmp_result.append('Content-type: {0}'.format(self.mimetype))

        header_list = zip(self.headers.keys(), self.headers.values())
        for key, value in header_list:
            tmp_result.append('{0}: {1}'.format(
                key, value
            ))

        return tmp_result

    def __str__(self):

        base = list()
        base.append('HTTP/1.1 {0} OK'.format(self.status))
        base.extend(self._create_headers())
        base.append('')
        base.append(self.content)

        tmp_result = "\r\n".join(base)

        return tmp_result

